//----------------------------------------------------------------------
//コーディングの方針
//----------------------------------------------------------------------
■全てのワーニングを除去する
ワーニングがある状態でのコミットは禁止


■ソースのコメント化
いらなくなったソースをコメント化すると
可読性が悪くなるためできるだけ無くす（禁止ではない）
古いソースを見たければSVNを使う


■ソースを変更や追加するときは前後の書き方に合わせる
たとえば下記(A)のような場所を編集する時に
下記(B)のような自分のスタイルで編集するのではなく、
下記(C)のように周りに合わせることにより全体的に見やすくすることを優先する

(A)
	switch(aaa)
	{
		case 1:
			if(flag){
				処理
			}
			break;
		case 2:
			処理
			break;
	}

(B)
	switch(aaa)
	{
	case 0:
		if(flag)
		{
			処理
		}
	break;
		case 1:
			if(flag){
				処理
			}
			break;
		case 2:
			処理
			break;
	}

(C)
	switch(aaa)
	{
		case 0:
			if(flag){
				処理
			}
			break;
		case 1:
			if(flag){
				処理
			}
			break;
		case 2:
			処理
			break;
	}

■タブについて
行頭から文字開始（インデント部分）まではタブを使用

■コメントについて
関数へのコメントはdoxygenで対応しているjavadoc方式でつける

■ログへの表示
ログへの表示は個人のローカル環境かエラーメッセージのみ

//----------------------------------------------------------------------
//ネーミング法則
//----------------------------------------------------------------------
■関数
キャメルケース
関数の最初の単語は動詞
(例)
void GetFunction();

■ローカル変数
小文字で単語の繋ぎはアンダーバー
(例)
int test_value;

■非公開なメンバー変数やグローバル変数(関数外にある変数)
小文字で単語の繋ぎはアンダーバーで最後がアンダーバー
(例)
int test_value_;

■公開されているメンバー変数やグローバル変数
キャメルケース
(例)
int TestValue;

■クラス
キャメルケース
(例)
class TestClass
{
};

■ネームスペース
キャメルケース
(例)
namespace TestNamespace
{
}

■enum
タグはキャメルケース
定義は大文字で単語の繋ぎがアンダーバー
(例)
enum TestEnum
{
	TEST_START,
	TEST_END,
};

■defineや定数
定義は大文字で単語の繋ぎがアンダーバー
(例)
#define TEST_DEFINE

